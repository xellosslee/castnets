- 배포순서 (NodejsWebApp 폴더에서 실행)
#docker 모두 삭제
docker rm -f $(docker ps -a -q)
docker rmi -f $(docker images -q)

#docker 빌드
docker rm -f node-was
docker build --tag node-was .
(run은 테스트용도로만 쓰고 실제론 docker-compose 써야함)
docker run --name node-was -d -p 80:3000 node-was

docker rm -f nginx
docker build --tag nginx ./nginx
(run은 테스트용도로만 쓰고 실제론 docker-compose 써야함)
docker run --name nginx-dc -d -p 80:80 nginx

#docker-compose 빌드 및 실행
docker-compose down
docker-compose up --build

nginx로그파일 위치 /var/log/nginx/error.log

// 도커 1개 실행
docker run --name node-was -d node-was

docker cp nginx-dc:/ c:/nginx-dc/
docker cp nginx-dc:/etc/nginx c:/nginx-dc/etc/

docker cp node-dc-1:/src c:/node-was/src1
docker cp node-dc-2:/src c:/node-was/src2
docker cp node-dc-3:/src c:/node-was/src3

* env(환경변수)는 소스코드에 저장하면 보안상의 위험이 있으므로 각각의 시스템에서 설정하며, 어떤 변수를 사용하는지만 기술해둔다.
NODE_ENV : 노드수행 환경 (값이 없으면 localhost모드, 운영에선 production 으로 사용)
CASTNETS_DBUSER : 접속할 mysql DB계정castnetsmysqler
CASTNETS_DBPASS : 접속할 DB계정의 비번c@stnet&mysql1@#

# React 빌드하기
node_modules/.bin/webpack app.tsx --config webpack-config.js

#docker 콘솔로 들어가기
docker exec -it node-dc-1 bash

#실행중인 docker들의 마지막 로그 20줄 확인
docker-compose logs -t --tail=20

# 서버별 설치
[DB]
yum -y install http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm
yum -y install mysql-community-server
systemctl start mysqld
systemctl enable mysqld
mysql


#굳이 변경하지 않고 latin1으로 쓰며 필드별로 utf8설정하도록 한다.
vi /etc/my.cnf
#mysql 기본 캐릭터셋 변경 필수 [mysqld] 아래에
character-set-server=utf8
collation-server=utf8_general_ci
skip-character-set-client-handshake
init_connect=SET collation_connection = utf8_general_ci
init_connect=SET NAMES utf8

service mysqld start
service firewalld stop
systemctl disable firewalld

[WAS]
yum -y install nodejs
yum -y install docker
yum -y install docker-compose
service docker start

mkdir /src
cd /src
yum -y install git
git clone https://xelloss-team.visualstudio.com/Castnets/_git/Castnets
#git id,pw 저장
git config credential.helper 'cache --timeout=864000'

cd /src/Castnets/NodejsWebApp
docker build --tag node-was .
npm install -g npm-check-updates
npm install
docker-compose up --build

#서버별 private IP지정
vi /etc/sysconfig/network-scripts/ifcfg-eth1

DEVICE=eth1
ONBOOT=yes
NM_CONTROLLED=no
BOOTPROTO=static
IPADDR=10.25.96.3
NETMASK=255.255.240.0
IPV6INIT=no
MTU=1450

ifup ifcfg-eth1

#서버간 공유폴더 설정(NAS서버 한대와 연결. 추후 여러대로 늘릴 경우 data01~99 으로 mount를 늘려간다. 또한 DB에도 어떤 NAS서버에 저장되었는지 함께 저장한다.)
mkdir /data
yum -y install epel-release
yum -y install fuse sshfs
sshfs root@10.25.96.4:/data /data -o allow_other


# 필요 프로토콜 정리

# 유저관련
로그인, 회원가입(이메일&문자), 휴대폰인증번호 발송, 휴대폰인증번호 인증, 토큰체크(굳이 호출할 필요는 없음)
유저정보(프로필,영상목록+킵영상목록)

# 영상관련
주변영상 목록(거리순), 지도영상 목록(지도 영역 안의 모든 영상들 가져옴), 영상 시청 기록(시작,종료,떠남), 영상 스트리밍
영상기준 영상목록(지도에서 특정 영상을 골라서 영상 페이지로 진입하는 경우 그 영상 기준으로 주변의 영상들을 거리순으로 가져옴)

# 파일관련
업로드(영상,프로필,배경), 삭제(나의 영상 삭제)
